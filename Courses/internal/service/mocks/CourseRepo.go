// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"Classroom/Courses/internal/domain"
	"Classroom/Courses/internal/dto"
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockCourseRepo creates a new instance of MockCourseRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCourseRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCourseRepo {
	mock := &MockCourseRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCourseRepo is an autogenerated mock type for the CourseRepo type
type MockCourseRepo struct {
	mock.Mock
}

type MockCourseRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCourseRepo) EXPECT() *MockCourseRepo_Expecter {
	return &MockCourseRepo_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockCourseRepo
func (_mock *MockCourseRepo) Create(ctx context.Context, dto1 dto.CreateCourseDTO) (domain.Course, error) {
	ret := _mock.Called(ctx, dto1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.Course
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.CreateCourseDTO) (domain.Course, error)); ok {
		return returnFunc(ctx, dto1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.CreateCourseDTO) domain.Course); ok {
		r0 = returnFunc(ctx, dto1)
	} else {
		r0 = ret.Get(0).(domain.Course)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dto.CreateCourseDTO) error); ok {
		r1 = returnFunc(ctx, dto1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCourseRepo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockCourseRepo_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - dto1
func (_e *MockCourseRepo_Expecter) Create(ctx interface{}, dto1 interface{}) *MockCourseRepo_Create_Call {
	return &MockCourseRepo_Create_Call{Call: _e.mock.On("Create", ctx, dto1)}
}

func (_c *MockCourseRepo_Create_Call) Run(run func(ctx context.Context, dto1 dto.CreateCourseDTO)) *MockCourseRepo_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.CreateCourseDTO))
	})
	return _c
}

func (_c *MockCourseRepo_Create_Call) Return(course domain.Course, err error) *MockCourseRepo_Create_Call {
	_c.Call.Return(course, err)
	return _c
}

func (_c *MockCourseRepo_Create_Call) RunAndReturn(run func(ctx context.Context, dto1 dto.CreateCourseDTO) (domain.Course, error)) *MockCourseRepo_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockCourseRepo
func (_mock *MockCourseRepo) Delete(ctx context.Context, courseID string) (domain.Course, error) {
	ret := _mock.Called(ctx, courseID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 domain.Course
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (domain.Course, error)); ok {
		return returnFunc(ctx, courseID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) domain.Course); ok {
		r0 = returnFunc(ctx, courseID)
	} else {
		r0 = ret.Get(0).(domain.Course)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, courseID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCourseRepo_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockCourseRepo_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx
//   - courseID
func (_e *MockCourseRepo_Expecter) Delete(ctx interface{}, courseID interface{}) *MockCourseRepo_Delete_Call {
	return &MockCourseRepo_Delete_Call{Call: _e.mock.On("Delete", ctx, courseID)}
}

func (_c *MockCourseRepo_Delete_Call) Run(run func(ctx context.Context, courseID string)) *MockCourseRepo_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCourseRepo_Delete_Call) Return(course domain.Course, err error) *MockCourseRepo_Delete_Call {
	_c.Call.Return(course, err)
	return _c
}

func (_c *MockCourseRepo_Delete_Call) RunAndReturn(run func(ctx context.Context, courseID string) (domain.Course, error)) *MockCourseRepo_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// EnrollUser provides a mock function for the type MockCourseRepo
func (_mock *MockCourseRepo) EnrollUser(ctx context.Context, courseID string, studentID string) (domain.Enrollment, error) {
	ret := _mock.Called(ctx, courseID, studentID)

	if len(ret) == 0 {
		panic("no return value specified for EnrollUser")
	}

	var r0 domain.Enrollment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (domain.Enrollment, error)); ok {
		return returnFunc(ctx, courseID, studentID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) domain.Enrollment); ok {
		r0 = returnFunc(ctx, courseID, studentID)
	} else {
		r0 = ret.Get(0).(domain.Enrollment)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, courseID, studentID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCourseRepo_EnrollUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnrollUser'
type MockCourseRepo_EnrollUser_Call struct {
	*mock.Call
}

// EnrollUser is a helper method to define mock.On call
//   - ctx
//   - courseID
//   - studentID
func (_e *MockCourseRepo_Expecter) EnrollUser(ctx interface{}, courseID interface{}, studentID interface{}) *MockCourseRepo_EnrollUser_Call {
	return &MockCourseRepo_EnrollUser_Call{Call: _e.mock.On("EnrollUser", ctx, courseID, studentID)}
}

func (_c *MockCourseRepo_EnrollUser_Call) Run(run func(ctx context.Context, courseID string, studentID string)) *MockCourseRepo_EnrollUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockCourseRepo_EnrollUser_Call) Return(enrollment domain.Enrollment, err error) *MockCourseRepo_EnrollUser_Call {
	_c.Call.Return(enrollment, err)
	return _c
}

func (_c *MockCourseRepo_EnrollUser_Call) RunAndReturn(run func(ctx context.Context, courseID string, studentID string) (domain.Enrollment, error)) *MockCourseRepo_EnrollUser_Call {
	_c.Call.Return(run)
	return _c
}

// ExpelUser provides a mock function for the type MockCourseRepo
func (_mock *MockCourseRepo) ExpelUser(ctx context.Context, courseID string, studentID string) (domain.Enrollment, error) {
	ret := _mock.Called(ctx, courseID, studentID)

	if len(ret) == 0 {
		panic("no return value specified for ExpelUser")
	}

	var r0 domain.Enrollment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (domain.Enrollment, error)); ok {
		return returnFunc(ctx, courseID, studentID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) domain.Enrollment); ok {
		r0 = returnFunc(ctx, courseID, studentID)
	} else {
		r0 = ret.Get(0).(domain.Enrollment)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, courseID, studentID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCourseRepo_ExpelUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpelUser'
type MockCourseRepo_ExpelUser_Call struct {
	*mock.Call
}

// ExpelUser is a helper method to define mock.On call
//   - ctx
//   - courseID
//   - studentID
func (_e *MockCourseRepo_Expecter) ExpelUser(ctx interface{}, courseID interface{}, studentID interface{}) *MockCourseRepo_ExpelUser_Call {
	return &MockCourseRepo_ExpelUser_Call{Call: _e.mock.On("ExpelUser", ctx, courseID, studentID)}
}

func (_c *MockCourseRepo_ExpelUser_Call) Run(run func(ctx context.Context, courseID string, studentID string)) *MockCourseRepo_ExpelUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockCourseRepo_ExpelUser_Call) Return(enrollment domain.Enrollment, err error) *MockCourseRepo_ExpelUser_Call {
	_c.Call.Return(enrollment, err)
	return _c
}

func (_c *MockCourseRepo_ExpelUser_Call) RunAndReturn(run func(ctx context.Context, courseID string, studentID string) (domain.Enrollment, error)) *MockCourseRepo_ExpelUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockCourseRepo
func (_mock *MockCourseRepo) GetByID(ctx context.Context, courseID string) (domain.Course, error) {
	ret := _mock.Called(ctx, courseID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.Course
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (domain.Course, error)); ok {
		return returnFunc(ctx, courseID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) domain.Course); ok {
		r0 = returnFunc(ctx, courseID)
	} else {
		r0 = ret.Get(0).(domain.Course)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, courseID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCourseRepo_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockCourseRepo_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx
//   - courseID
func (_e *MockCourseRepo_Expecter) GetByID(ctx interface{}, courseID interface{}) *MockCourseRepo_GetByID_Call {
	return &MockCourseRepo_GetByID_Call{Call: _e.mock.On("GetByID", ctx, courseID)}
}

func (_c *MockCourseRepo_GetByID_Call) Run(run func(ctx context.Context, courseID string)) *MockCourseRepo_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCourseRepo_GetByID_Call) Return(course domain.Course, err error) *MockCourseRepo_GetByID_Call {
	_c.Call.Return(course, err)
	return _c
}

func (_c *MockCourseRepo_GetByID_Call) RunAndReturn(run func(ctx context.Context, courseID string) (domain.Course, error)) *MockCourseRepo_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// IsMember provides a mock function for the type MockCourseRepo
func (_mock *MockCourseRepo) IsMember(ctx context.Context, courseID string, userID string) (bool, error) {
	ret := _mock.Called(ctx, courseID, userID)

	if len(ret) == 0 {
		panic("no return value specified for IsMember")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return returnFunc(ctx, courseID, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = returnFunc(ctx, courseID, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, courseID, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCourseRepo_IsMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsMember'
type MockCourseRepo_IsMember_Call struct {
	*mock.Call
}

// IsMember is a helper method to define mock.On call
//   - ctx
//   - courseID
//   - userID
func (_e *MockCourseRepo_Expecter) IsMember(ctx interface{}, courseID interface{}, userID interface{}) *MockCourseRepo_IsMember_Call {
	return &MockCourseRepo_IsMember_Call{Call: _e.mock.On("IsMember", ctx, courseID, userID)}
}

func (_c *MockCourseRepo_IsMember_Call) Run(run func(ctx context.Context, courseID string, userID string)) *MockCourseRepo_IsMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockCourseRepo_IsMember_Call) Return(b bool, err error) *MockCourseRepo_IsMember_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockCourseRepo_IsMember_Call) RunAndReturn(run func(ctx context.Context, courseID string, userID string) (bool, error)) *MockCourseRepo_IsMember_Call {
	_c.Call.Return(run)
	return _c
}

// IsTeacher provides a mock function for the type MockCourseRepo
func (_mock *MockCourseRepo) IsTeacher(ctx context.Context, courseID string, teacherID string) (bool, error) {
	ret := _mock.Called(ctx, courseID, teacherID)

	if len(ret) == 0 {
		panic("no return value specified for IsTeacher")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return returnFunc(ctx, courseID, teacherID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = returnFunc(ctx, courseID, teacherID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, courseID, teacherID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCourseRepo_IsTeacher_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsTeacher'
type MockCourseRepo_IsTeacher_Call struct {
	*mock.Call
}

// IsTeacher is a helper method to define mock.On call
//   - ctx
//   - courseID
//   - teacherID
func (_e *MockCourseRepo_Expecter) IsTeacher(ctx interface{}, courseID interface{}, teacherID interface{}) *MockCourseRepo_IsTeacher_Call {
	return &MockCourseRepo_IsTeacher_Call{Call: _e.mock.On("IsTeacher", ctx, courseID, teacherID)}
}

func (_c *MockCourseRepo_IsTeacher_Call) Run(run func(ctx context.Context, courseID string, teacherID string)) *MockCourseRepo_IsTeacher_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockCourseRepo_IsTeacher_Call) Return(b bool, err error) *MockCourseRepo_IsTeacher_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockCourseRepo_IsTeacher_Call) RunAndReturn(run func(ctx context.Context, courseID string, teacherID string) (bool, error)) *MockCourseRepo_IsTeacher_Call {
	_c.Call.Return(run)
	return _c
}

// ListByStudentID provides a mock function for the type MockCourseRepo
func (_mock *MockCourseRepo) ListByStudentID(ctx context.Context, teacherID string) ([]domain.Course, error) {
	ret := _mock.Called(ctx, teacherID)

	if len(ret) == 0 {
		panic("no return value specified for ListByStudentID")
	}

	var r0 []domain.Course
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]domain.Course, error)); ok {
		return returnFunc(ctx, teacherID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []domain.Course); ok {
		r0 = returnFunc(ctx, teacherID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Course)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, teacherID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCourseRepo_ListByStudentID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByStudentID'
type MockCourseRepo_ListByStudentID_Call struct {
	*mock.Call
}

// ListByStudentID is a helper method to define mock.On call
//   - ctx
//   - teacherID
func (_e *MockCourseRepo_Expecter) ListByStudentID(ctx interface{}, teacherID interface{}) *MockCourseRepo_ListByStudentID_Call {
	return &MockCourseRepo_ListByStudentID_Call{Call: _e.mock.On("ListByStudentID", ctx, teacherID)}
}

func (_c *MockCourseRepo_ListByStudentID_Call) Run(run func(ctx context.Context, teacherID string)) *MockCourseRepo_ListByStudentID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCourseRepo_ListByStudentID_Call) Return(courses []domain.Course, err error) *MockCourseRepo_ListByStudentID_Call {
	_c.Call.Return(courses, err)
	return _c
}

func (_c *MockCourseRepo_ListByStudentID_Call) RunAndReturn(run func(ctx context.Context, teacherID string) ([]domain.Course, error)) *MockCourseRepo_ListByStudentID_Call {
	_c.Call.Return(run)
	return _c
}

// ListByTeacherID provides a mock function for the type MockCourseRepo
func (_mock *MockCourseRepo) ListByTeacherID(ctx context.Context, teacherID string) ([]domain.Course, error) {
	ret := _mock.Called(ctx, teacherID)

	if len(ret) == 0 {
		panic("no return value specified for ListByTeacherID")
	}

	var r0 []domain.Course
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]domain.Course, error)); ok {
		return returnFunc(ctx, teacherID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []domain.Course); ok {
		r0 = returnFunc(ctx, teacherID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Course)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, teacherID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCourseRepo_ListByTeacherID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByTeacherID'
type MockCourseRepo_ListByTeacherID_Call struct {
	*mock.Call
}

// ListByTeacherID is a helper method to define mock.On call
//   - ctx
//   - teacherID
func (_e *MockCourseRepo_Expecter) ListByTeacherID(ctx interface{}, teacherID interface{}) *MockCourseRepo_ListByTeacherID_Call {
	return &MockCourseRepo_ListByTeacherID_Call{Call: _e.mock.On("ListByTeacherID", ctx, teacherID)}
}

func (_c *MockCourseRepo_ListByTeacherID_Call) Run(run func(ctx context.Context, teacherID string)) *MockCourseRepo_ListByTeacherID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCourseRepo_ListByTeacherID_Call) Return(courses []domain.Course, err error) *MockCourseRepo_ListByTeacherID_Call {
	_c.Call.Return(courses, err)
	return _c
}

func (_c *MockCourseRepo_ListByTeacherID_Call) RunAndReturn(run func(ctx context.Context, teacherID string) ([]domain.Course, error)) *MockCourseRepo_ListByTeacherID_Call {
	_c.Call.Return(run)
	return _c
}

// ListCourseStudents provides a mock function for the type MockCourseRepo
func (_mock *MockCourseRepo) ListCourseStudents(ctx context.Context, courseID string, index int32, limit int32) ([]domain.Student, int32, error) {
	ret := _mock.Called(ctx, courseID, index, limit)

	if len(ret) == 0 {
		panic("no return value specified for ListCourseStudents")
	}

	var r0 []domain.Student
	var r1 int32
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int32, int32) ([]domain.Student, int32, error)); ok {
		return returnFunc(ctx, courseID, index, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int32, int32) []domain.Student); ok {
		r0 = returnFunc(ctx, courseID, index, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Student)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, int32, int32) int32); ok {
		r1 = returnFunc(ctx, courseID, index, limit)
	} else {
		r1 = ret.Get(1).(int32)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, int32, int32) error); ok {
		r2 = returnFunc(ctx, courseID, index, limit)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockCourseRepo_ListCourseStudents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCourseStudents'
type MockCourseRepo_ListCourseStudents_Call struct {
	*mock.Call
}

// ListCourseStudents is a helper method to define mock.On call
//   - ctx
//   - courseID
//   - index
//   - limit
func (_e *MockCourseRepo_Expecter) ListCourseStudents(ctx interface{}, courseID interface{}, index interface{}, limit interface{}) *MockCourseRepo_ListCourseStudents_Call {
	return &MockCourseRepo_ListCourseStudents_Call{Call: _e.mock.On("ListCourseStudents", ctx, courseID, index, limit)}
}

func (_c *MockCourseRepo_ListCourseStudents_Call) Run(run func(ctx context.Context, courseID string, index int32, limit int32)) *MockCourseRepo_ListCourseStudents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int32), args[3].(int32))
	})
	return _c
}

func (_c *MockCourseRepo_ListCourseStudents_Call) Return(students []domain.Student, n int32, err error) *MockCourseRepo_ListCourseStudents_Call {
	_c.Call.Return(students, n, err)
	return _c
}

func (_c *MockCourseRepo_ListCourseStudents_Call) RunAndReturn(run func(ctx context.Context, courseID string, index int32, limit int32) ([]domain.Student, int32, error)) *MockCourseRepo_ListCourseStudents_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockCourseRepo
func (_mock *MockCourseRepo) Update(ctx context.Context, dto1 dto.UpdateCourseDTO) (domain.Course, error) {
	ret := _mock.Called(ctx, dto1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 domain.Course
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.UpdateCourseDTO) (domain.Course, error)); ok {
		return returnFunc(ctx, dto1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.UpdateCourseDTO) domain.Course); ok {
		r0 = returnFunc(ctx, dto1)
	} else {
		r0 = ret.Get(0).(domain.Course)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dto.UpdateCourseDTO) error); ok {
		r1 = returnFunc(ctx, dto1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCourseRepo_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockCourseRepo_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx
//   - dto1
func (_e *MockCourseRepo_Expecter) Update(ctx interface{}, dto1 interface{}) *MockCourseRepo_Update_Call {
	return &MockCourseRepo_Update_Call{Call: _e.mock.On("Update", ctx, dto1)}
}

func (_c *MockCourseRepo_Update_Call) Run(run func(ctx context.Context, dto1 dto.UpdateCourseDTO)) *MockCourseRepo_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.UpdateCourseDTO))
	})
	return _c
}

func (_c *MockCourseRepo_Update_Call) Return(course domain.Course, err error) *MockCourseRepo_Update_Call {
	_c.Call.Return(course, err)
	return _c
}

func (_c *MockCourseRepo_Update_Call) RunAndReturn(run func(ctx context.Context, dto1 dto.UpdateCourseDTO) (domain.Course, error)) *MockCourseRepo_Update_Call {
	_c.Call.Return(run)
	return _c
}
