// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"Classroom/Courses/pkg/events"

	mock "github.com/stretchr/testify/mock"
)

// NewMockProducer creates a new instance of MockProducer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProducer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProducer {
	mock := &MockProducer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProducer is an autogenerated mock type for the Producer type
type MockProducer struct {
	mock.Mock
}

type MockProducer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProducer) EXPECT() *MockProducer_Expecter {
	return &MockProducer_Expecter{mock: &_m.Mock}
}

// PublishUserEnrolled provides a mock function for the type MockProducer
func (_mock *MockProducer) PublishUserEnrolled(event events.UserEnrolled) error {
	ret := _mock.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for PublishUserEnrolled")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(events.UserEnrolled) error); ok {
		r0 = returnFunc(event)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProducer_PublishUserEnrolled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishUserEnrolled'
type MockProducer_PublishUserEnrolled_Call struct {
	*mock.Call
}

// PublishUserEnrolled is a helper method to define mock.On call
//   - event
func (_e *MockProducer_Expecter) PublishUserEnrolled(event interface{}) *MockProducer_PublishUserEnrolled_Call {
	return &MockProducer_PublishUserEnrolled_Call{Call: _e.mock.On("PublishUserEnrolled", event)}
}

func (_c *MockProducer_PublishUserEnrolled_Call) Run(run func(event events.UserEnrolled)) *MockProducer_PublishUserEnrolled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(events.UserEnrolled))
	})
	return _c
}

func (_c *MockProducer_PublishUserEnrolled_Call) Return(err error) *MockProducer_PublishUserEnrolled_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProducer_PublishUserEnrolled_Call) RunAndReturn(run func(event events.UserEnrolled) error) *MockProducer_PublishUserEnrolled_Call {
	_c.Call.Return(run)
	return _c
}

// PublishUserExpelled provides a mock function for the type MockProducer
func (_mock *MockProducer) PublishUserExpelled(event events.UserExpelled) error {
	ret := _mock.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for PublishUserExpelled")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(events.UserExpelled) error); ok {
		r0 = returnFunc(event)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProducer_PublishUserExpelled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishUserExpelled'
type MockProducer_PublishUserExpelled_Call struct {
	*mock.Call
}

// PublishUserExpelled is a helper method to define mock.On call
//   - event
func (_e *MockProducer_Expecter) PublishUserExpelled(event interface{}) *MockProducer_PublishUserExpelled_Call {
	return &MockProducer_PublishUserExpelled_Call{Call: _e.mock.On("PublishUserExpelled", event)}
}

func (_c *MockProducer_PublishUserExpelled_Call) Run(run func(event events.UserExpelled)) *MockProducer_PublishUserExpelled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(events.UserExpelled))
	})
	return _c
}

func (_c *MockProducer_PublishUserExpelled_Call) Return(err error) *MockProducer_PublishUserExpelled_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProducer_PublishUserExpelled_Call) RunAndReturn(run func(event events.UserExpelled) error) *MockProducer_PublishUserExpelled_Call {
	_c.Call.Return(run)
	return _c
}
