// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package controller

import (
	"Classroom/Tasks/internal/domain"
	"Classroom/Tasks/internal/dto"
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockTaskService creates a new instance of MockTaskService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTaskService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTaskService {
	mock := &MockTaskService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTaskService is an autogenerated mock type for the TaskService type
type MockTaskService struct {
	mock.Mock
}

type MockTaskService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTaskService) EXPECT() *MockTaskService_Expecter {
	return &MockTaskService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockTaskService
func (_mock *MockTaskService) Create(ctx context.Context, dto1 dto.CreateTaskDTO) (string, error) {
	ret := _mock.Called(ctx, dto1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.CreateTaskDTO) (string, error)); ok {
		return returnFunc(ctx, dto1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.CreateTaskDTO) string); ok {
		r0 = returnFunc(ctx, dto1)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dto.CreateTaskDTO) error); ok {
		r1 = returnFunc(ctx, dto1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockTaskService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - dto1
func (_e *MockTaskService_Expecter) Create(ctx interface{}, dto1 interface{}) *MockTaskService_Create_Call {
	return &MockTaskService_Create_Call{Call: _e.mock.On("Create", ctx, dto1)}
}

func (_c *MockTaskService_Create_Call) Run(run func(ctx context.Context, dto1 dto.CreateTaskDTO)) *MockTaskService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.CreateTaskDTO))
	})
	return _c
}

func (_c *MockTaskService_Create_Call) Return(s string, err error) *MockTaskService_Create_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockTaskService_Create_Call) RunAndReturn(run func(ctx context.Context, dto1 dto.CreateTaskDTO) (string, error)) *MockTaskService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockTaskService
func (_mock *MockTaskService) Delete(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTaskService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockTaskService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockTaskService_Expecter) Delete(ctx interface{}, id interface{}) *MockTaskService_Delete_Call {
	return &MockTaskService_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockTaskService_Delete_Call) Run(run func(ctx context.Context, id string)) *MockTaskService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTaskService_Delete_Call) Return(err error) *MockTaskService_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTaskService_Delete_Call) RunAndReturn(run func(ctx context.Context, id string) error) *MockTaskService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskByID provides a mock function for the type MockTaskService
func (_mock *MockTaskService) GetTaskByID(ctx context.Context, id string) (domain.Task, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskByID")
	}

	var r0 domain.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (domain.Task, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) domain.Task); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Task)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskService_GetTaskByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskByID'
type MockTaskService_GetTaskByID_Call struct {
	*mock.Call
}

// GetTaskByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockTaskService_Expecter) GetTaskByID(ctx interface{}, id interface{}) *MockTaskService_GetTaskByID_Call {
	return &MockTaskService_GetTaskByID_Call{Call: _e.mock.On("GetTaskByID", ctx, id)}
}

func (_c *MockTaskService_GetTaskByID_Call) Run(run func(ctx context.Context, id string)) *MockTaskService_GetTaskByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTaskService_GetTaskByID_Call) Return(task domain.Task, err error) *MockTaskService_GetTaskByID_Call {
	_c.Call.Return(task, err)
	return _c
}

func (_c *MockTaskService_GetTaskByID_Call) RunAndReturn(run func(ctx context.Context, id string) (domain.Task, error)) *MockTaskService_GetTaskByID_Call {
	_c.Call.Return(run)
	return _c
}

// ListByCourseID provides a mock function for the type MockTaskService
func (_mock *MockTaskService) ListByCourseID(ctx context.Context, courseID string) ([]domain.Task, error) {
	ret := _mock.Called(ctx, courseID)

	if len(ret) == 0 {
		panic("no return value specified for ListByCourseID")
	}

	var r0 []domain.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]domain.Task, error)); ok {
		return returnFunc(ctx, courseID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []domain.Task); ok {
		r0 = returnFunc(ctx, courseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, courseID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskService_ListByCourseID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByCourseID'
type MockTaskService_ListByCourseID_Call struct {
	*mock.Call
}

// ListByCourseID is a helper method to define mock.On call
//   - ctx
//   - courseID
func (_e *MockTaskService_Expecter) ListByCourseID(ctx interface{}, courseID interface{}) *MockTaskService_ListByCourseID_Call {
	return &MockTaskService_ListByCourseID_Call{Call: _e.mock.On("ListByCourseID", ctx, courseID)}
}

func (_c *MockTaskService_ListByCourseID_Call) Run(run func(ctx context.Context, courseID string)) *MockTaskService_ListByCourseID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTaskService_ListByCourseID_Call) Return(tasks []domain.Task, err error) *MockTaskService_ListByCourseID_Call {
	_c.Call.Return(tasks, err)
	return _c
}

func (_c *MockTaskService_ListByCourseID_Call) RunAndReturn(run func(ctx context.Context, courseID string) ([]domain.Task, error)) *MockTaskService_ListByCourseID_Call {
	_c.Call.Return(run)
	return _c
}

// ListByStudentID provides a mock function for the type MockTaskService
func (_mock *MockTaskService) ListByStudentID(ctx context.Context, studentID string, courseID string) ([]domain.StudentTask, error) {
	ret := _mock.Called(ctx, studentID, courseID)

	if len(ret) == 0 {
		panic("no return value specified for ListByStudentID")
	}

	var r0 []domain.StudentTask
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) ([]domain.StudentTask, error)); ok {
		return returnFunc(ctx, studentID, courseID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) []domain.StudentTask); ok {
		r0 = returnFunc(ctx, studentID, courseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.StudentTask)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, studentID, courseID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskService_ListByStudentID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByStudentID'
type MockTaskService_ListByStudentID_Call struct {
	*mock.Call
}

// ListByStudentID is a helper method to define mock.On call
//   - ctx
//   - studentID
//   - courseID
func (_e *MockTaskService_Expecter) ListByStudentID(ctx interface{}, studentID interface{}, courseID interface{}) *MockTaskService_ListByStudentID_Call {
	return &MockTaskService_ListByStudentID_Call{Call: _e.mock.On("ListByStudentID", ctx, studentID, courseID)}
}

func (_c *MockTaskService_ListByStudentID_Call) Run(run func(ctx context.Context, studentID string, courseID string)) *MockTaskService_ListByStudentID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockTaskService_ListByStudentID_Call) Return(studentTasks []domain.StudentTask, err error) *MockTaskService_ListByStudentID_Call {
	_c.Call.Return(studentTasks, err)
	return _c
}

func (_c *MockTaskService_ListByStudentID_Call) RunAndReturn(run func(ctx context.Context, studentID string, courseID string) ([]domain.StudentTask, error)) *MockTaskService_ListByStudentID_Call {
	_c.Call.Return(run)
	return _c
}

// ListTaskStatuses provides a mock function for the type MockTaskService
func (_mock *MockTaskService) ListTaskStatuses(ctx context.Context, taskID string) ([]domain.TaskStatus, error) {
	ret := _mock.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for ListTaskStatuses")
	}

	var r0 []domain.TaskStatus
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]domain.TaskStatus, error)); ok {
		return returnFunc(ctx, taskID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []domain.TaskStatus); ok {
		r0 = returnFunc(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.TaskStatus)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskService_ListTaskStatuses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTaskStatuses'
type MockTaskService_ListTaskStatuses_Call struct {
	*mock.Call
}

// ListTaskStatuses is a helper method to define mock.On call
//   - ctx
//   - taskID
func (_e *MockTaskService_Expecter) ListTaskStatuses(ctx interface{}, taskID interface{}) *MockTaskService_ListTaskStatuses_Call {
	return &MockTaskService_ListTaskStatuses_Call{Call: _e.mock.On("ListTaskStatuses", ctx, taskID)}
}

func (_c *MockTaskService_ListTaskStatuses_Call) Run(run func(ctx context.Context, taskID string)) *MockTaskService_ListTaskStatuses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTaskService_ListTaskStatuses_Call) Return(taskStatuss []domain.TaskStatus, err error) *MockTaskService_ListTaskStatuses_Call {
	_c.Call.Return(taskStatuss, err)
	return _c
}

func (_c *MockTaskService_ListTaskStatuses_Call) RunAndReturn(run func(ctx context.Context, taskID string) ([]domain.TaskStatus, error)) *MockTaskService_ListTaskStatuses_Call {
	_c.Call.Return(run)
	return _c
}

// ToggleTaskStatus provides a mock function for the type MockTaskService
func (_mock *MockTaskService) ToggleTaskStatus(ctx context.Context, taskID string, userID string) (domain.TaskStatus, error) {
	ret := _mock.Called(ctx, taskID, userID)

	if len(ret) == 0 {
		panic("no return value specified for ToggleTaskStatus")
	}

	var r0 domain.TaskStatus
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (domain.TaskStatus, error)); ok {
		return returnFunc(ctx, taskID, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) domain.TaskStatus); ok {
		r0 = returnFunc(ctx, taskID, userID)
	} else {
		r0 = ret.Get(0).(domain.TaskStatus)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, taskID, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskService_ToggleTaskStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToggleTaskStatus'
type MockTaskService_ToggleTaskStatus_Call struct {
	*mock.Call
}

// ToggleTaskStatus is a helper method to define mock.On call
//   - ctx
//   - taskID
//   - userID
func (_e *MockTaskService_Expecter) ToggleTaskStatus(ctx interface{}, taskID interface{}, userID interface{}) *MockTaskService_ToggleTaskStatus_Call {
	return &MockTaskService_ToggleTaskStatus_Call{Call: _e.mock.On("ToggleTaskStatus", ctx, taskID, userID)}
}

func (_c *MockTaskService_ToggleTaskStatus_Call) Run(run func(ctx context.Context, taskID string, userID string)) *MockTaskService_ToggleTaskStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockTaskService_ToggleTaskStatus_Call) Return(taskStatus domain.TaskStatus, err error) *MockTaskService_ToggleTaskStatus_Call {
	_c.Call.Return(taskStatus, err)
	return _c
}

func (_c *MockTaskService_ToggleTaskStatus_Call) RunAndReturn(run func(ctx context.Context, taskID string, userID string) (domain.TaskStatus, error)) *MockTaskService_ToggleTaskStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockTaskService
func (_mock *MockTaskService) Update(ctx context.Context, dto1 dto.UpdateTaskDTO) (domain.Task, error) {
	ret := _mock.Called(ctx, dto1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 domain.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.UpdateTaskDTO) (domain.Task, error)); ok {
		return returnFunc(ctx, dto1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.UpdateTaskDTO) domain.Task); ok {
		r0 = returnFunc(ctx, dto1)
	} else {
		r0 = ret.Get(0).(domain.Task)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dto.UpdateTaskDTO) error); ok {
		r1 = returnFunc(ctx, dto1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockTaskService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx
//   - dto1
func (_e *MockTaskService_Expecter) Update(ctx interface{}, dto1 interface{}) *MockTaskService_Update_Call {
	return &MockTaskService_Update_Call{Call: _e.mock.On("Update", ctx, dto1)}
}

func (_c *MockTaskService_Update_Call) Run(run func(ctx context.Context, dto1 dto.UpdateTaskDTO)) *MockTaskService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.UpdateTaskDTO))
	})
	return _c
}

func (_c *MockTaskService_Update_Call) Return(task domain.Task, err error) *MockTaskService_Update_Call {
	_c.Call.Return(task, err)
	return _c
}

func (_c *MockTaskService_Update_Call) RunAndReturn(run func(ctx context.Context, dto1 dto.UpdateTaskDTO) (domain.Task, error)) *MockTaskService_Update_Call {
	_c.Call.Return(run)
	return _c
}
