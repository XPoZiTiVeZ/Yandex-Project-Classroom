// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"Classroom/Tasks/internal/domain"
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockStatusRepo creates a new instance of MockStatusRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStatusRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStatusRepo {
	mock := &MockStatusRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStatusRepo is an autogenerated mock type for the StatusRepo type
type MockStatusRepo struct {
	mock.Mock
}

type MockStatusRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStatusRepo) EXPECT() *MockStatusRepo_Expecter {
	return &MockStatusRepo_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockStatusRepo
func (_mock *MockStatusRepo) Create(ctx context.Context, status domain.TaskStatus) error {
	ret := _mock.Called(ctx, status)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.TaskStatus) error); ok {
		r0 = returnFunc(ctx, status)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStatusRepo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockStatusRepo_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - status
func (_e *MockStatusRepo_Expecter) Create(ctx interface{}, status interface{}) *MockStatusRepo_Create_Call {
	return &MockStatusRepo_Create_Call{Call: _e.mock.On("Create", ctx, status)}
}

func (_c *MockStatusRepo_Create_Call) Run(run func(ctx context.Context, status domain.TaskStatus)) *MockStatusRepo_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.TaskStatus))
	})
	return _c
}

func (_c *MockStatusRepo_Create_Call) Return(err error) *MockStatusRepo_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStatusRepo_Create_Call) RunAndReturn(run func(ctx context.Context, status domain.TaskStatus) error) *MockStatusRepo_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockStatusRepo
func (_mock *MockStatusRepo) Get(ctx context.Context, taskID string, userID string) (domain.TaskStatus, error) {
	ret := _mock.Called(ctx, taskID, userID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 domain.TaskStatus
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (domain.TaskStatus, error)); ok {
		return returnFunc(ctx, taskID, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) domain.TaskStatus); ok {
		r0 = returnFunc(ctx, taskID, userID)
	} else {
		r0 = ret.Get(0).(domain.TaskStatus)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, taskID, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStatusRepo_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockStatusRepo_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx
//   - taskID
//   - userID
func (_e *MockStatusRepo_Expecter) Get(ctx interface{}, taskID interface{}, userID interface{}) *MockStatusRepo_Get_Call {
	return &MockStatusRepo_Get_Call{Call: _e.mock.On("Get", ctx, taskID, userID)}
}

func (_c *MockStatusRepo_Get_Call) Run(run func(ctx context.Context, taskID string, userID string)) *MockStatusRepo_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockStatusRepo_Get_Call) Return(taskStatus domain.TaskStatus, err error) *MockStatusRepo_Get_Call {
	_c.Call.Return(taskStatus, err)
	return _c
}

func (_c *MockStatusRepo_Get_Call) RunAndReturn(run func(ctx context.Context, taskID string, userID string) (domain.TaskStatus, error)) *MockStatusRepo_Get_Call {
	_c.Call.Return(run)
	return _c
}

// ListByTaskID provides a mock function for the type MockStatusRepo
func (_mock *MockStatusRepo) ListByTaskID(ctx context.Context, taskID string) ([]domain.TaskStatus, error) {
	ret := _mock.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for ListByTaskID")
	}

	var r0 []domain.TaskStatus
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]domain.TaskStatus, error)); ok {
		return returnFunc(ctx, taskID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []domain.TaskStatus); ok {
		r0 = returnFunc(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.TaskStatus)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStatusRepo_ListByTaskID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByTaskID'
type MockStatusRepo_ListByTaskID_Call struct {
	*mock.Call
}

// ListByTaskID is a helper method to define mock.On call
//   - ctx
//   - taskID
func (_e *MockStatusRepo_Expecter) ListByTaskID(ctx interface{}, taskID interface{}) *MockStatusRepo_ListByTaskID_Call {
	return &MockStatusRepo_ListByTaskID_Call{Call: _e.mock.On("ListByTaskID", ctx, taskID)}
}

func (_c *MockStatusRepo_ListByTaskID_Call) Run(run func(ctx context.Context, taskID string)) *MockStatusRepo_ListByTaskID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStatusRepo_ListByTaskID_Call) Return(taskStatuss []domain.TaskStatus, err error) *MockStatusRepo_ListByTaskID_Call {
	_c.Call.Return(taskStatuss, err)
	return _c
}

func (_c *MockStatusRepo_ListByTaskID_Call) RunAndReturn(run func(ctx context.Context, taskID string) ([]domain.TaskStatus, error)) *MockStatusRepo_ListByTaskID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockStatusRepo
func (_mock *MockStatusRepo) Update(ctx context.Context, status domain.TaskStatus) error {
	ret := _mock.Called(ctx, status)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.TaskStatus) error); ok {
		r0 = returnFunc(ctx, status)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStatusRepo_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockStatusRepo_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx
//   - status
func (_e *MockStatusRepo_Expecter) Update(ctx interface{}, status interface{}) *MockStatusRepo_Update_Call {
	return &MockStatusRepo_Update_Call{Call: _e.mock.On("Update", ctx, status)}
}

func (_c *MockStatusRepo_Update_Call) Run(run func(ctx context.Context, status domain.TaskStatus)) *MockStatusRepo_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.TaskStatus))
	})
	return _c
}

func (_c *MockStatusRepo_Update_Call) Return(err error) *MockStatusRepo_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStatusRepo_Update_Call) RunAndReturn(run func(ctx context.Context, status domain.TaskStatus) error) *MockStatusRepo_Update_Call {
	_c.Call.Return(run)
	return _c
}
