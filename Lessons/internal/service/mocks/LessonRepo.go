// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"Classroom/Lessons/internal/domain"
	"Classroom/Lessons/internal/dto"
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockLessonRepo creates a new instance of MockLessonRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLessonRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLessonRepo {
	mock := &MockLessonRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLessonRepo is an autogenerated mock type for the LessonRepo type
type MockLessonRepo struct {
	mock.Mock
}

type MockLessonRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLessonRepo) EXPECT() *MockLessonRepo_Expecter {
	return &MockLessonRepo_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockLessonRepo
func (_mock *MockLessonRepo) Create(ctx context.Context, dto1 dto.CreateLessonDTO) (domain.Lesson, error) {
	ret := _mock.Called(ctx, dto1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.Lesson
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.CreateLessonDTO) (domain.Lesson, error)); ok {
		return returnFunc(ctx, dto1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.CreateLessonDTO) domain.Lesson); ok {
		r0 = returnFunc(ctx, dto1)
	} else {
		r0 = ret.Get(0).(domain.Lesson)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dto.CreateLessonDTO) error); ok {
		r1 = returnFunc(ctx, dto1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLessonRepo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockLessonRepo_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - dto1
func (_e *MockLessonRepo_Expecter) Create(ctx interface{}, dto1 interface{}) *MockLessonRepo_Create_Call {
	return &MockLessonRepo_Create_Call{Call: _e.mock.On("Create", ctx, dto1)}
}

func (_c *MockLessonRepo_Create_Call) Run(run func(ctx context.Context, dto1 dto.CreateLessonDTO)) *MockLessonRepo_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.CreateLessonDTO))
	})
	return _c
}

func (_c *MockLessonRepo_Create_Call) Return(lesson domain.Lesson, err error) *MockLessonRepo_Create_Call {
	_c.Call.Return(lesson, err)
	return _c
}

func (_c *MockLessonRepo_Create_Call) RunAndReturn(run func(ctx context.Context, dto1 dto.CreateLessonDTO) (domain.Lesson, error)) *MockLessonRepo_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockLessonRepo
func (_mock *MockLessonRepo) Delete(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLessonRepo_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockLessonRepo_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockLessonRepo_Expecter) Delete(ctx interface{}, id interface{}) *MockLessonRepo_Delete_Call {
	return &MockLessonRepo_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockLessonRepo_Delete_Call) Run(run func(ctx context.Context, id string)) *MockLessonRepo_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockLessonRepo_Delete_Call) Return(err error) *MockLessonRepo_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLessonRepo_Delete_Call) RunAndReturn(run func(ctx context.Context, id string) error) *MockLessonRepo_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockLessonRepo
func (_mock *MockLessonRepo) GetByID(ctx context.Context, id string) (domain.Lesson, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.Lesson
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (domain.Lesson, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) domain.Lesson); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Lesson)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLessonRepo_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockLessonRepo_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockLessonRepo_Expecter) GetByID(ctx interface{}, id interface{}) *MockLessonRepo_GetByID_Call {
	return &MockLessonRepo_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockLessonRepo_GetByID_Call) Run(run func(ctx context.Context, id string)) *MockLessonRepo_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockLessonRepo_GetByID_Call) Return(lesson domain.Lesson, err error) *MockLessonRepo_GetByID_Call {
	_c.Call.Return(lesson, err)
	return _c
}

func (_c *MockLessonRepo_GetByID_Call) RunAndReturn(run func(ctx context.Context, id string) (domain.Lesson, error)) *MockLessonRepo_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// ListByCourseID provides a mock function for the type MockLessonRepo
func (_mock *MockLessonRepo) ListByCourseID(ctx context.Context, courseID string) ([]domain.Lesson, error) {
	ret := _mock.Called(ctx, courseID)

	if len(ret) == 0 {
		panic("no return value specified for ListByCourseID")
	}

	var r0 []domain.Lesson
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]domain.Lesson, error)); ok {
		return returnFunc(ctx, courseID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []domain.Lesson); ok {
		r0 = returnFunc(ctx, courseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Lesson)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, courseID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLessonRepo_ListByCourseID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByCourseID'
type MockLessonRepo_ListByCourseID_Call struct {
	*mock.Call
}

// ListByCourseID is a helper method to define mock.On call
//   - ctx
//   - courseID
func (_e *MockLessonRepo_Expecter) ListByCourseID(ctx interface{}, courseID interface{}) *MockLessonRepo_ListByCourseID_Call {
	return &MockLessonRepo_ListByCourseID_Call{Call: _e.mock.On("ListByCourseID", ctx, courseID)}
}

func (_c *MockLessonRepo_ListByCourseID_Call) Run(run func(ctx context.Context, courseID string)) *MockLessonRepo_ListByCourseID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockLessonRepo_ListByCourseID_Call) Return(lessons []domain.Lesson, err error) *MockLessonRepo_ListByCourseID_Call {
	_c.Call.Return(lessons, err)
	return _c
}

func (_c *MockLessonRepo_ListByCourseID_Call) RunAndReturn(run func(ctx context.Context, courseID string) ([]domain.Lesson, error)) *MockLessonRepo_ListByCourseID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockLessonRepo
func (_mock *MockLessonRepo) Update(ctx context.Context, dto1 dto.UpdateLessonDTO) (domain.Lesson, error) {
	ret := _mock.Called(ctx, dto1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 domain.Lesson
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.UpdateLessonDTO) (domain.Lesson, error)); ok {
		return returnFunc(ctx, dto1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.UpdateLessonDTO) domain.Lesson); ok {
		r0 = returnFunc(ctx, dto1)
	} else {
		r0 = ret.Get(0).(domain.Lesson)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dto.UpdateLessonDTO) error); ok {
		r1 = returnFunc(ctx, dto1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLessonRepo_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockLessonRepo_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx
//   - dto1
func (_e *MockLessonRepo_Expecter) Update(ctx interface{}, dto1 interface{}) *MockLessonRepo_Update_Call {
	return &MockLessonRepo_Update_Call{Call: _e.mock.On("Update", ctx, dto1)}
}

func (_c *MockLessonRepo_Update_Call) Run(run func(ctx context.Context, dto1 dto.UpdateLessonDTO)) *MockLessonRepo_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.UpdateLessonDTO))
	})
	return _c
}

func (_c *MockLessonRepo_Update_Call) Return(lesson domain.Lesson, err error) *MockLessonRepo_Update_Call {
	_c.Call.Return(lesson, err)
	return _c
}

func (_c *MockLessonRepo_Update_Call) RunAndReturn(run func(ctx context.Context, dto1 dto.UpdateLessonDTO) (domain.Lesson, error)) *MockLessonRepo_Update_Call {
	_c.Call.Return(run)
	return _c
}
