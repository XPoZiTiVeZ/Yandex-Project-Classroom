services:
  postgres:
    container_name: postgres
    restart: unless-stopped
    build:
      context: ./Postgres
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - '${POSTGRES_PORT}:${POSTGRES_PORT}'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} || exit 1']
      interval: 10s
      timeout: 1s
      retries: 3
    volumes:
      - ./Postgres/postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  redis:
    container_name: redis
    restart: unless-stopped
    build:
      context: ./Redis
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - '${REDIS_PORT}:${REDIS_PORT}'
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 1s
      retries: 3
    volumes:
      - ./Redis/redis_data:/data
    networks:
      - app-network

  # service-auth:
  #   container_name: auth
  #   restart: unless-stopped
  #   build:
  #     context: ./Auth
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./Auth/config/config.yaml:/app/config/config.yaml
  #   env_file:
  #     - .env
  #   ports:
  #     - "${SERVICE_AUTH_PORT}:${SERVICE_AUTH_PORT}"
  #   command: ["--config", "/app/config/config.yaml"]
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   networks:
  #     - app-network

  # service-courses:
  #   container_name: courses
  #   restart: unless-stopped
  #   build:
  #     context: ./Courses
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./Courses/config/config.yaml:/app/config/config.yaml
  #   env_file:
  #     - .env
  #   ports:
  #     - "${SERVICE_COURSES_PORT}:${SERVICE_COURSES_PORT}"
  #   command: ["--config", "/app/config/config.yaml"]
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   networks:
  #     - app-network

  # service-lessons:
  #   container_name: lessons
  #   restart: unless-stopped
  #   build:
  #     context: ./Lessons
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./Lessons/config/config.yaml:/app/config/config.yaml
  #   env_file:
  #     - .env
  #   ports:
  #     - "${SERVICE_LESSONS_PORT}:${SERVICE_LESSONS_PORT}"
  #   command: ["--config", "/app/config/config.yaml"]
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   networks:
  #     - app-network

  # service-tasks:
  #   container_name: tasks
  #   restart: unless-stopped
  #   build:
  #     context: ./Tasks
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./Tasks/config/config.yaml:/app/config/config.yaml
  #   env_file:
  #     - .env
  #   ports:
  #     - "${SERVICE_TASKS_PORT}:${SERVICE_TASKS_PORT}"
  #   command: ["--config", "/app/config/config.yaml"]
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   networks:
  #     - app-network

  # service-notifications:
  #   container_name: notifications
  #   restart: unless-stopped
  #   build:
  #     context: ./Notifications
  #     dockerfile: Dockerfile
  #   env_file:
  #     - .env
  #   ports:
  #     - "${SERVICE_NOTIFICATIONS_PORT}:${SERVICE_NOTIFICATIONS_PORT}"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   networks:
  #     - app-network

  # service-chat:
  #   container_name: chat
  #   restart: unless-stopped
  #   build:
  #     context: ./Chat
  #     dockerfile: Dockerfile
  #   env_file:
  #     - .env
  #   ports:
  #     - "${SERVICE_CHAT_PORT}:${SERVICE_CHAT_PORT}"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   networks:
  #     - app-network

  service-gateway:
    container_name: gateway
    restart: unless-stopped
    build:
      context: ./Gateway
      dockerfile: Dockerfile
    volumes:
      - ./Gateway/configs/config.yaml:/app/configs/config.yaml
    env_file:
      - .env
    command: ['--config', '/app/configs/config.yaml']
    networks:
      - app-network

  nginx:
    container_name: nginx
    restart: unless-stopped
    image: nginx:1.27-alpine
    volumes:
      - ./Nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./Gateway/docs/swagger.json:/var/www/classroom/swagger.json
    ports:
      - '${NGINX_PORT}:${NGINX_PORT}'
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
