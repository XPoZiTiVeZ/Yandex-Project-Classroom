// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	dto "Classroom/Auth/internal/dto"
	entities "Classroom/Auth/internal/entities"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// UserRepo is an autogenerated mock type for the UserRepo type
type UserRepo struct {
	mock.Mock
}

type UserRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepo) EXPECT() *UserRepo_Expecter {
	return &UserRepo_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *UserRepo) Create(ctx context.Context, _a1 dto.CreateUserDTO) (entities.User, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.CreateUserDTO) (entities.User, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.CreateUserDTO) entities.User); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.CreateUserDTO) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type UserRepo_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 dto.CreateUserDTO
func (_e *UserRepo_Expecter) Create(ctx interface{}, _a1 interface{}) *UserRepo_Create_Call {
	return &UserRepo_Create_Call{Call: _e.mock.On("Create", ctx, _a1)}
}

func (_c *UserRepo_Create_Call) Run(run func(ctx context.Context, _a1 dto.CreateUserDTO)) *UserRepo_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.CreateUserDTO))
	})
	return _c
}

func (_c *UserRepo_Create_Call) Return(_a0 entities.User, _a1 error) *UserRepo_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepo_Create_Call) RunAndReturn(run func(context.Context, dto.CreateUserDTO) (entities.User, error)) *UserRepo_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEmail provides a mock function with given fields: ctx, email
func (_m *UserRepo) GetByEmail(ctx context.Context, email string) (entities.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entities.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entities.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepo_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type UserRepo_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *UserRepo_Expecter) GetByEmail(ctx interface{}, email interface{}) *UserRepo_GetByEmail_Call {
	return &UserRepo_GetByEmail_Call{Call: _e.mock.On("GetByEmail", ctx, email)}
}

func (_c *UserRepo_GetByEmail_Call) Run(run func(ctx context.Context, email string)) *UserRepo_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserRepo_GetByEmail_Call) Return(_a0 entities.User, _a1 error) *UserRepo_GetByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepo_GetByEmail_Call) RunAndReturn(run func(context.Context, string) (entities.User, error)) *UserRepo_GetByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *UserRepo) GetByID(ctx context.Context, id string) (entities.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entities.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entities.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepo_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type UserRepo_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *UserRepo_Expecter) GetByID(ctx interface{}, id interface{}) *UserRepo_GetByID_Call {
	return &UserRepo_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *UserRepo_GetByID_Call) Run(run func(ctx context.Context, id string)) *UserRepo_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserRepo_GetByID_Call) Return(_a0 entities.User, _a1 error) *UserRepo_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepo_GetByID_Call) RunAndReturn(run func(context.Context, string) (entities.User, error)) *UserRepo_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserRepo creates a new instance of UserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepo {
	mock := &UserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
