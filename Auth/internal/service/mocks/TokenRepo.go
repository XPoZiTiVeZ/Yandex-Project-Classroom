// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"Classroom/Auth/internal/entities"
	"context"
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewMockTokenRepo creates a new instance of MockTokenRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTokenRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTokenRepo {
	mock := &MockTokenRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTokenRepo is an autogenerated mock type for the TokenRepo type
type MockTokenRepo struct {
	mock.Mock
}

type MockTokenRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTokenRepo) EXPECT() *MockTokenRepo_Expecter {
	return &MockTokenRepo_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockTokenRepo
func (_mock *MockTokenRepo) Create(ctx context.Context, userID string, ttl time.Duration) (string, error) {
	ret := _mock.Called(ctx, userID, ttl)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, time.Duration) (string, error)); ok {
		return returnFunc(ctx, userID, ttl)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, time.Duration) string); ok {
		r0 = returnFunc(ctx, userID, ttl)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, time.Duration) error); ok {
		r1 = returnFunc(ctx, userID, ttl)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTokenRepo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockTokenRepo_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - userID
//   - ttl
func (_e *MockTokenRepo_Expecter) Create(ctx interface{}, userID interface{}, ttl interface{}) *MockTokenRepo_Create_Call {
	return &MockTokenRepo_Create_Call{Call: _e.mock.On("Create", ctx, userID, ttl)}
}

func (_c *MockTokenRepo_Create_Call) Run(run func(ctx context.Context, userID string, ttl time.Duration)) *MockTokenRepo_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration))
	})
	return _c
}

func (_c *MockTokenRepo_Create_Call) Return(s string, err error) *MockTokenRepo_Create_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockTokenRepo_Create_Call) RunAndReturn(run func(ctx context.Context, userID string, ttl time.Duration) (string, error)) *MockTokenRepo_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetInfoByToken provides a mock function for the type MockTokenRepo
func (_mock *MockTokenRepo) GetInfoByToken(ctx context.Context, token string) (entities.RefreshToken, error) {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetInfoByToken")
	}

	var r0 entities.RefreshToken
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (entities.RefreshToken, error)); ok {
		return returnFunc(ctx, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) entities.RefreshToken); ok {
		r0 = returnFunc(ctx, token)
	} else {
		r0 = ret.Get(0).(entities.RefreshToken)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTokenRepo_GetInfoByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInfoByToken'
type MockTokenRepo_GetInfoByToken_Call struct {
	*mock.Call
}

// GetInfoByToken is a helper method to define mock.On call
//   - ctx
//   - token
func (_e *MockTokenRepo_Expecter) GetInfoByToken(ctx interface{}, token interface{}) *MockTokenRepo_GetInfoByToken_Call {
	return &MockTokenRepo_GetInfoByToken_Call{Call: _e.mock.On("GetInfoByToken", ctx, token)}
}

func (_c *MockTokenRepo_GetInfoByToken_Call) Run(run func(ctx context.Context, token string)) *MockTokenRepo_GetInfoByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTokenRepo_GetInfoByToken_Call) Return(refreshToken entities.RefreshToken, err error) *MockTokenRepo_GetInfoByToken_Call {
	_c.Call.Return(refreshToken, err)
	return _c
}

func (_c *MockTokenRepo_GetInfoByToken_Call) RunAndReturn(run func(ctx context.Context, token string) (entities.RefreshToken, error)) *MockTokenRepo_GetInfoByToken_Call {
	_c.Call.Return(run)
	return _c
}

// Revoke provides a mock function for the type MockTokenRepo
func (_mock *MockTokenRepo) Revoke(ctx context.Context, token string) (bool, error) {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for Revoke")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return returnFunc(ctx, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = returnFunc(ctx, token)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTokenRepo_Revoke_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Revoke'
type MockTokenRepo_Revoke_Call struct {
	*mock.Call
}

// Revoke is a helper method to define mock.On call
//   - ctx
//   - token
func (_e *MockTokenRepo_Expecter) Revoke(ctx interface{}, token interface{}) *MockTokenRepo_Revoke_Call {
	return &MockTokenRepo_Revoke_Call{Call: _e.mock.On("Revoke", ctx, token)}
}

func (_c *MockTokenRepo_Revoke_Call) Run(run func(ctx context.Context, token string)) *MockTokenRepo_Revoke_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTokenRepo_Revoke_Call) Return(b bool, err error) *MockTokenRepo_Revoke_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockTokenRepo_Revoke_Call) RunAndReturn(run func(ctx context.Context, token string) (bool, error)) *MockTokenRepo_Revoke_Call {
	_c.Call.Return(run)
	return _c
}
