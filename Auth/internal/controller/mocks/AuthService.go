// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package controller

import (
	"Classroom/Auth/internal/dto"
	"Classroom/Auth/internal/entities"
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockAuthService creates a new instance of MockAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthService {
	mock := &MockAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthService is an autogenerated mock type for the AuthService type
type MockAuthService struct {
	mock.Mock
}

type MockAuthService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthService) EXPECT() *MockAuthService_Expecter {
	return &MockAuthService_Expecter{mock: &_m.Mock}
}

// GetUserInfo provides a mock function for the type MockAuthService
func (_mock *MockAuthService) GetUserInfo(ctx context.Context, userID string) (entities.User, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserInfo")
	}

	var r0 entities.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (entities.User, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) entities.User); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		r0 = ret.Get(0).(entities.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthService_GetUserInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserInfo'
type MockAuthService_GetUserInfo_Call struct {
	*mock.Call
}

// GetUserInfo is a helper method to define mock.On call
//   - ctx
//   - userID
func (_e *MockAuthService_Expecter) GetUserInfo(ctx interface{}, userID interface{}) *MockAuthService_GetUserInfo_Call {
	return &MockAuthService_GetUserInfo_Call{Call: _e.mock.On("GetUserInfo", ctx, userID)}
}

func (_c *MockAuthService_GetUserInfo_Call) Run(run func(ctx context.Context, userID string)) *MockAuthService_GetUserInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuthService_GetUserInfo_Call) Return(user entities.User, err error) *MockAuthService_GetUserInfo_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockAuthService_GetUserInfo_Call) RunAndReturn(run func(ctx context.Context, userID string) (entities.User, error)) *MockAuthService_GetUserInfo_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function for the type MockAuthService
func (_mock *MockAuthService) Login(ctx context.Context, dto1 dto.LoginDTO) (dto.TokensDTO, error) {
	ret := _mock.Called(ctx, dto1)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 dto.TokensDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.LoginDTO) (dto.TokensDTO, error)); ok {
		return returnFunc(ctx, dto1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.LoginDTO) dto.TokensDTO); ok {
		r0 = returnFunc(ctx, dto1)
	} else {
		r0 = ret.Get(0).(dto.TokensDTO)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dto.LoginDTO) error); ok {
		r1 = returnFunc(ctx, dto1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockAuthService_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx
//   - dto1
func (_e *MockAuthService_Expecter) Login(ctx interface{}, dto1 interface{}) *MockAuthService_Login_Call {
	return &MockAuthService_Login_Call{Call: _e.mock.On("Login", ctx, dto1)}
}

func (_c *MockAuthService_Login_Call) Run(run func(ctx context.Context, dto1 dto.LoginDTO)) *MockAuthService_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.LoginDTO))
	})
	return _c
}

func (_c *MockAuthService_Login_Call) Return(tokensDTO dto.TokensDTO, err error) *MockAuthService_Login_Call {
	_c.Call.Return(tokensDTO, err)
	return _c
}

func (_c *MockAuthService_Login_Call) RunAndReturn(run func(ctx context.Context, dto1 dto.LoginDTO) (dto.TokensDTO, error)) *MockAuthService_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function for the type MockAuthService
func (_mock *MockAuthService) Logout(ctx context.Context, refreshToken string) error {
	ret := _mock.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, refreshToken)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAuthService_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type MockAuthService_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - ctx
//   - refreshToken
func (_e *MockAuthService_Expecter) Logout(ctx interface{}, refreshToken interface{}) *MockAuthService_Logout_Call {
	return &MockAuthService_Logout_Call{Call: _e.mock.On("Logout", ctx, refreshToken)}
}

func (_c *MockAuthService_Logout_Call) Run(run func(ctx context.Context, refreshToken string)) *MockAuthService_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuthService_Logout_Call) Return(err error) *MockAuthService_Logout_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAuthService_Logout_Call) RunAndReturn(run func(ctx context.Context, refreshToken string) error) *MockAuthService_Logout_Call {
	_c.Call.Return(run)
	return _c
}

// Refresh provides a mock function for the type MockAuthService
func (_mock *MockAuthService) Refresh(ctx context.Context, refreshToken string) (string, error) {
	ret := _mock.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for Refresh")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, refreshToken)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, refreshToken)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, refreshToken)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthService_Refresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Refresh'
type MockAuthService_Refresh_Call struct {
	*mock.Call
}

// Refresh is a helper method to define mock.On call
//   - ctx
//   - refreshToken
func (_e *MockAuthService_Expecter) Refresh(ctx interface{}, refreshToken interface{}) *MockAuthService_Refresh_Call {
	return &MockAuthService_Refresh_Call{Call: _e.mock.On("Refresh", ctx, refreshToken)}
}

func (_c *MockAuthService_Refresh_Call) Run(run func(ctx context.Context, refreshToken string)) *MockAuthService_Refresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuthService_Refresh_Call) Return(s string, err error) *MockAuthService_Refresh_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockAuthService_Refresh_Call) RunAndReturn(run func(ctx context.Context, refreshToken string) (string, error)) *MockAuthService_Refresh_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function for the type MockAuthService
func (_mock *MockAuthService) Register(ctx context.Context, dto1 dto.RegisterDTO) (string, error) {
	ret := _mock.Called(ctx, dto1)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.RegisterDTO) (string, error)); ok {
		return returnFunc(ctx, dto1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.RegisterDTO) string); ok {
		r0 = returnFunc(ctx, dto1)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dto.RegisterDTO) error); ok {
		r1 = returnFunc(ctx, dto1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthService_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockAuthService_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx
//   - dto1
func (_e *MockAuthService_Expecter) Register(ctx interface{}, dto1 interface{}) *MockAuthService_Register_Call {
	return &MockAuthService_Register_Call{Call: _e.mock.On("Register", ctx, dto1)}
}

func (_c *MockAuthService_Register_Call) Run(run func(ctx context.Context, dto1 dto.RegisterDTO)) *MockAuthService_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.RegisterDTO))
	})
	return _c
}

func (_c *MockAuthService_Register_Call) Return(s string, err error) *MockAuthService_Register_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockAuthService_Register_Call) RunAndReturn(run func(ctx context.Context, dto1 dto.RegisterDTO) (string, error)) *MockAuthService_Register_Call {
	_c.Call.Return(run)
	return _c
}
